#Check for Emscripten
cleand0=false
cleandp=false
cleanqcc=false
cleanqc=false
compiled0=
if [ -z $EMSDK ]
then
    echo "EMSDK not installed/set up correctly, cloning and setting up temporarily"
	mkdir -f .tmp
    git clone "https://github.com/emscripten-core/emsdk" ".tmp/emsdk"
    .tmp/emsdk install latest
    .tmp/emsdk activate latest
    . .tmp/emsdk/emsdk_env.sh
    
fi

export CC="emcc -sUSE_SDL=2 -sUSE_LIBJPEG=1"

export MAKE="emmake make"
while :; do
	case "$1" in
		-0)
			compiled0=true
			shift
			;;
		-1)
			compiled0=false
			shift
			;;
		-c)
			cleand0=true
			cleandp=true
			cleanqcc=true
			cleanqc=true
			shift
			;;
		-qc)
			cleanqc=true
			shift
			;;
		-d|-p|-r)
			case "$1" in
				-d)
					debug=debug
					;;
				-p)
					debug=profile
					;;
				-r)
					debug=release
					;;
			esac
			export CC="$CC -g"
			case "`$CC -dumpversion`" in
				[5-9]*|[1-9][0-9]*|4.[3-9]*|4.[1-9][0-9]*)
					# gcc 4.3 or higher
					# -march=native is broken < 4.3
					if $CC -mtune=native -march=native misc/tools/conftest.c -o conftest >/dev/null 2>&1; then
						export CC="$CC -mtune=native -march=native"
					fi
					;;
			esac
			if [ -n "$WE_HATE_OUR_USERS" ]; then
				export CC="$CC -fno-common"
			fi
			shift
			;;
		*)
			break
			;;
			esac
done
TARGETS="sdl-$debug"
if [ x"`uname`" = x"Darwin" ]; then
	export CC="$CC -fno-reorder-blocks"
fi

if [ $# -gt 0 ] && [ x"$1" = x"" ]; then
	# if we give the command make the arg "", it will surely fail (invalid filename),
	# so better handle it as an empty client option
	BAD_TARGETS=" "
	shift
elif [ -n "$1" ]; then
	BAD_TARGETS=
	TARGETS_SAVE=$TARGETS
	TARGETS=
	for X in $1; do
		case "$X" in
			sdl)
				TARGETS="$TARGETS sdl-$debug"
				;;
			dedicated)
                export MAKE="make"
                export CC="gcc"
				TARGETS="$TARGETS sv-$debug"
				;;
			*)
				BAD_TARGETS="$BAD_TARGETS $X"
				;;
		esac
	done
	if [ -n "$TARGETS" ]; then # at least a valid client
		shift
	else # no valid client, let's assume this option is not meant to be a client then
		TARGETS=$TARGETS_SAVE
		BAD_TARGETS=
	fi
fi
if [ -z "$MAKEFLAGS" ]; then
	ncpus=`getconf _NPROCESSORS_ONLN 2>/dev/null || getconf NPROCESSORS_ONLN 2>/dev/null || echo 1`
	if [ $ncpus -gt 1 ]; then
		MAKEFLAGS=-j$ncpus
	fi
elif echo $MAKEFLAGS | head -c1 | grep -qv -; then # MAKEFLAGS starts with a single letter option
	MAKEFLAGS=-$(echo $MAKEFLAGS)                  # echo here and above will trim whitespaces
fi
# No cp commands, we want to use static linking instead.
export CC="$CC -I../../../../misc/builddeps/emscripten/d0_blind_id/include"
export CC="$CC -L../../../../misc/builddeps/emscripten/d0_blind_id/lib"
export CC="$CC -Wl,-rpath,../../../../misc/builddeps/emscripten/d0_blind_id/lib"
export CC="$CC -I../../../../misc/builddeps/emscripten/gmp/include"
export CC="$CC -L../../../../misc/builddeps/emscripten/gmp/lib"
export CC="$CC -Wl,-rpath,../../../../misc/builddeps/emscripten/gmp/lib"
MAKEFLAGS="$MAKEFLAGS DP_LINK_CRYPTO=shared DP_LINK_CRYPTO_RIJNDAEL=shared LIB_CRYPTO=../../../../misc/builddeps/emscripten/d0_blind_id/lib/libd0_blind_id.a LIB_CRYPTO+=../../../../misc/builddeps/emscripten/gmp/lib/libgmp.a LIB_CRYPTO_RIJNDAEL=../../../../misc/builddeps/emscripten/d0_blind_id/lib/libd0_rijndael.a"
compiled0=false

if $compiled0; then
	if $cleand0; then
		if [ -f Makefile ]; then
			verbose $MAKE $MAKEFLAGS distclean
		fi
	fi
	if ! [ -f Makefile ]; then
		verbose sh autogen.sh
		verbose emconfigure ./configure
	fi
	verbose $MAKE $MAKEFLAGS
fi
verbose cd "$d0/gmqcc"
MAKE="make"
if $cleanqcc; then
	verbose $MAKE $MAKEFLAGS clean
fi
if [ -n "$WE_HATE_OUR_USERS" ]; then
	verbose $MAKE $MAKEFLAGS gmqcc.exe
else
	verbose $MAKE $MAKEFLAGS gmqcc
fi

if [ -n "$MSYSTEM" ]; then
	DATAMAKE=mingw32-make
else
	DATAMAKE=make
fi
verbose cd "$d0/data/xonotic-data.pk3dir"
if $cleanqc; then
	verbose ${DATAMAKE} QCC="../../../../gmqcc/gmqcc" "$@" $MAKEFLAGS clean
fi
verbose ${DATAMAKE} QCC="../../../../gmqcc/gmqcc" "$@" $MAKEFLAGS
# 4 levels up: data, xonotic-data, qcsrc, server
